# This scripts generates all necessary resources for the gui
# and the arduino microcontroller application compilation

Set-Location $PSScriptRoot

# Embed interface definition information as a resource for arduino compilation
$JSON_MEMBER_SIZE = 8  # Size in bytes that is needed by a single member in a json object on an AVR microchip architecture as used in Arduino MEGA
function CalculateJsonDocSize($interfaceDef)
{
    $size = 0
    foreach ($prop in $interfaceDef.psobject.Properties)
    {
        if ($prop.Value.GetType().Name -eq "String")
        {
            $size += $JSON_MEMBER_SIZE
        }
        elseif ($prop.Value.GetType().Name -eq "PSCustomObject")
        {
            $size += $JSON_MEMBER_SIZE + $( CalculateJsonDocSize $prop.Value )
        }
    }
    return $size
}
function CreateInterfaceStruct($interfaceDef)
{
    $string = ""
    foreach ($prop in $interfaceDef.psobject.Properties)
    {
        if ($prop.Value.GetType().Name -eq "String")
        {
            $string += "$( $prop.Value ) $( $prop.Name );"
        }
        elseif ($prop.Value.GetType().Name -eq "PSCustomObject")
        {
            $string += "struct {`n$( CreateInterfaceStruct $prop.Value )} $( $prop.Name );"
        }
        $string += "`n"
    }
    return $string
}
function CreateInterfaceStructInitializerList($interfaceDef)
{
    function VariableInitializer($val, $accessor)
    {
        $string = ""
        if ($val.GetType().Name -eq "String")
        {
            $string = "doc$accessor"
        }
        elseif ($val.GetType().Name -eq "PSCustomObject")
        {
            $string = "{"
            foreach ($prop in $val.psobject.Properties)
            {
                $string += "$( VariableInitializer $prop.Value $( $accessor + '[`"' + $( $prop.Name ) + '`"]' ) ), "
            }
            $string = $string.Substring(0, $string.Length - 2)
            $string += "}"
        }
        return $string
    }
    $string = ""
    foreach ($prop in $interfaceDef.psobject.Properties)
    {
        $string += "$( $prop.Name )($( VariableInitializer $prop.Value $( '[`"' + $prop.Name + '`"]' ) ), "
    }
    return $string.Substring(0, $string.Length - 2)
}
function CreateInterfaceStructToDoc($interfaceDef)
{
    function AssignDocMember($val, $objName, $accessor)
    {
        $key = $accessor.Split(".")[-1]
        $string = ""
        if ($val.GetType().Name -eq "String")
        {
            $string = "$objName[`"$key`"] = this.$accessor;`n"
        }
        elseif ($val.GetType().Name -eq "PSCustomObject")
        {
            $string = "JsonObject $key = $objName.createNestedObject(`"$key`");`n"
            foreach ($prop in $val.psobject.Properties)
            {
                $string += AssignDocMember $prop.Value $key "$accessor.$( $prop.Name )"
            }
        }
        return $string
    }
    $string = ""
    foreach ($prop in $interfaceDef.psobject.Properties)
    {
        $string += "$( AssignDocMember $prop.Value doc $prop.Name )"
    }
    return $string
}

$interfaceJsonContentString = Get-Content -Path ".\interface.json"
$interfaceJsonObject = $interfaceJsonContentString | ConvertFrom-Json

$fileString = "// This file is automatically generated

#ifndef INTERFACE_HPP
#define INTERFACE_HPP

#include <ArduinoJson.h>

#define JSON_DOC_SIZE_RX $( CalculateJsonDocSize $interfaceJsonObject.to_device )
#define JSON_DOC_SIZE_TX $( CalculateJsonDocSize $interfaceJsonObject.from_device )

namespace Interface {
struct RX {

$( CreateInterfaceStruct $interfaceJsonObject.to_device )
RX(const StaticJsonDocument doc) : $( CreateInterfaceStructInitializerList $interfaceJsonObject.to_device ) {}

}

struct TX {
$( CreateInterfaceStruct $interfaceJsonObject.from_device )
void to_doc(StaticJsonDocument* doc) {
$( CreateInterfaceStructToDoc $interfaceJsonObject.from_device )}

}
}

#endif
"

Set-Content -NoNewline -Path ".\controller\interface.hpp" -Value $fileString

# Generate gui resources
#Set-Location gui
#resources\generate.ps1
#Set-Location ..
